<!--    
This file is part of the KPal distribution (https://github.com/krush62/KPal).
Copyright (c) 2023 Andreas Kruschinski.

This program is free software: you can redistribute it and/or modify  
it under the terms of the GNU General Public License as published by  
the Free Software Foundation, version 3.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
General Public License for more details.
You should have received a copy of the GNU General Public License 
long with this program. If not, see <http://www.gnu.org/licenses/>.
-->
    
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">

    <FontFamily x:Key="PixelUniCode">pack://application:,,,/fonts/#Pixel Unicode Regular</FontFamily>    
    <BitmapImage x:Key="ButtonCloseNormal" UriSource="pack://application:,,,/buttons/close_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonCloseHover" UriSource="pack://application:,,,/buttons/close_hover.png" RenderOptions.BitmapScalingMode="Linear"/>    
    <BitmapImage x:Key="ButtonClosePressed" UriSource="pack://application:,,,/buttons/close_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonMaximizeNormal" UriSource="pack://application:,,,/buttons/maximize_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonMaximizeHover" UriSource="pack://application:,,,/buttons/maximize_hover.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonMaximizePressed" UriSource="pack://application:,,,/buttons/maximize_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonMinimizeNormal" UriSource="pack://application:,,,/buttons/minimize_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonMinimizeHover" UriSource="pack://application:,,,/buttons/minimize_hover.png" RenderOptions.BitmapScalingMode="Linear"/>    
    <BitmapImage x:Key="ButtonMinimizePressed" UriSource="pack://application:,,,/buttons/minimize_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="LinkGraphic" UriSource="pack://application:,,,/buttons/link.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonLoadNormal" UriSource="pack://application:,,,/buttons/load_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonLoadHover" UriSource="pack://application:,,,/buttons/load_hover.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonLoadPressed" UriSource="pack://application:,,,/buttons/load_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSaveNormal" UriSource="pack://application:,,,/buttons/save_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSaveHover" UriSource="pack://application:,,,/buttons/save_hover.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSavePressed" UriSource="pack://application:,,,/buttons/save_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonExportNormal" UriSource="pack://application:,,,/buttons/export_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonExportHover" UriSource="pack://application:,,,/buttons/export_hover.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonExportPressed" UriSource="pack://application:,,,/buttons/export_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonNewNormal" UriSource="pack://application:,,,/buttons/new_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonNewHover" UriSource="pack://application:,,,/buttons/new_hover.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonNewPressed" UriSource="pack://application:,,,/buttons/new_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatHighNormal" UriSource="pack://application:,,,/buttons/sat_high_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatHighHover" UriSource="pack://application:,,,/buttons/sat_high_hover.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatHighPressed" UriSource="pack://application:,,,/buttons/sat_high_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatLowNormal" UriSource="pack://application:,,,/buttons/sat_low_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatLowHover" UriSource="pack://application:,,,/buttons/sat_low_hover.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatLowPressed" UriSource="pack://application:,,,/buttons/sat_low_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatLinearNormal" UriSource="pack://application:,,,/buttons/sat_linear_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatLinearHover" UriSource="pack://application:,,,/buttons/sat_linear_hover.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatLinearPressed" UriSource="pack://application:,,,/buttons/sat_linear_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatBothNormal" UriSource="pack://application:,,,/buttons/sat_both_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatBothHover" UriSource="pack://application:,,,/buttons/sat_both_hover.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonSatBothPressed" UriSource="pack://application:,,,/buttons/sat_both_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonInfoNormal" UriSource="pack://application:,,,/buttons/info_normal.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonInfoHover" UriSource="pack://application:,,,/buttons/info_hover.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="ButtonInfoPressed" UriSource="pack://application:,,,/buttons/info_pressed.png" RenderOptions.BitmapScalingMode="Linear"/>
    <BitmapImage x:Key="EditGraphic" UriSource="pack://application:,,,/buttons/edit.png" RenderOptions.BitmapScalingMode="Linear"/>

    <sys:Double x:Key="PaletteEditor_DefaultValue_HeightMaximized">250</sys:Double>
    <sys:Double x:Key="PaletteEditor_DefaultValue_HeightMinimized">100</sys:Double>

    <sys:Double x:Key="PaletteEditor_ColorCountMin">3</sys:Double>
    <sys:Double x:Key="PaletteEditor_ColorCountMax">15</sys:Double>
    <sys:Double x:Key="PaletteEditor_DefaultValue_ColorCount">7</sys:Double>
    
    <sys:Double x:Key="PaletteEditor_HueMin">0</sys:Double>
    <sys:Double x:Key="PaletteEditor_HueMax">360</sys:Double>
    <sys:Double x:Key="PaletteEditor_DefaultValue_BaseHue">180</sys:Double>
    
    <sys:Double x:Key="PaletteEditor_SaturationMin">0</sys:Double>
    <sys:Double x:Key="PaletteEditor_SaturationMax">100</sys:Double>
    <sys:Double x:Key="PaletteEditor_DefaultValue_BaseSaturation">60</sys:Double>
    
    <sys:Double x:Key="PaletteEditor_HueShiftMin">-90</sys:Double>
    <sys:Double x:Key="PaletteEditor_HueShiftMax">90</sys:Double>
    <sys:Double x:Key="PaletteEditor_DefaultValue_HueShift">-10</sys:Double>
    
    <sys:Double x:Key="PaletteEditor_HueShiftExponentMin">0.5</sys:Double>
    <sys:Double x:Key="PaletteEditor_HueShiftExponentMax">2</sys:Double>
    <sys:Double x:Key="PaletteEditor_DefaultValue_HueShiftExponent">1</sys:Double>
    
    <sys:Double x:Key="PaletteEditor_SaturationShiftMin">-25</sys:Double>
    <sys:Double x:Key="PaletteEditor_SaturationShiftMax">25</sys:Double>
    <sys:Double x:Key="PaletteEditor_DefaultValue_SaturationShift">-10</sys:Double>
    
    <sys:Double x:Key="PaletteEditor_SaturationShiftExponentMin">0.5</sys:Double>
    <sys:Double x:Key="PaletteEditor_SaturationShiftExponentMax">2</sys:Double>
    <sys:Double x:Key="PaletteEditor_DefaultValue_SaturationShiftExponent">1</sys:Double>
    
    <sys:Double x:Key="PaletteEditor_ValueMin">0</sys:Double>
    <sys:Double x:Key="PaletteEditor_ValueMax">100</sys:Double>
    <sys:Double x:Key="PaletteEditor_DefaultValue_ValueMin">15</sys:Double>
    <sys:Double x:Key="PaletteEditor_DefaultValue_ValueMax">95</sys:Double>

    <sys:Double x:Key="PaletteColor_HueShiftMin">-25</sys:Double>
    <sys:Double x:Key="PaletteColor_HueShiftMax">25</sys:Double>
    <sys:Double x:Key="PaletteColor_DefaultValue_HueShift">0</sys:Double>

    <sys:Double x:Key="PaletteColor_SatShiftMin">-15</sys:Double>
    <sys:Double x:Key="PaletteColor_SatShiftMax">15</sys:Double>
    <sys:Double x:Key="PaletteColor_DefaultValue_SatShift">0</sys:Double>

    <sys:Double x:Key="PaletteColor_ValShiftMin">-15</sys:Double>
    <sys:Double x:Key="PaletteColor_ValShiftMax">15</sys:Double>
    <sys:Double x:Key="PaletteColor_DefaultValue_ValShift">0</sys:Double>


    <Style TargetType="Label">
        <Setter Property="FontFamily" Value="{StaticResource PixelUniCode}" />
        <Setter Property="RenderOptions.EdgeMode" Value="Aliased" />
    </Style>

    <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- PLUS BUTTON-->
    <Style x:Key="ButtonStyleGeneral" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Black"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="#666666"/>
        <Setter Property="FontFamily" Value="{DynamicResource PixelUniCode}"/>
        <Setter Property="BorderThickness" Value="4"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#666666"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="White"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="Black"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#666666"/>
                        </Trigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <!-- PALETTE EDITOR -->
    <Style TargetType="Label" x:Key="PaletteEditorSettingLabel">
        <Setter Property="FontSize" Value="19" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{StaticResource PixelUniCode}" />
    </Style>    
    <Style TargetType="Rectangle" x:Key="PaletteEditorBGRectangle">
        <Setter Property="Grid.Column" Value="0" />
        <Setter Property="Grid.ColumnSpan" Value="3" />
        <Setter Property="Fill" Value="Black" />
    </Style>
    

    <!-- NORMAL SLIDER -->
    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="SliderThumb.Static.Background" Color="Black"/>
    <SolidColorBrush x:Key="SliderThumb.Static.Border" Color="Black"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Background" Color="#666666"/>
    <SolidColorBrush x:Key="SliderThumb.MouseOver.Border" Color="Black"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Background" Color="White"/>
    <SolidColorBrush x:Key="SliderThumb.Pressed.Border" Color="Black"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Background" Color="#d4d4d4"/>
    <SolidColorBrush x:Key="SliderThumb.Disabled.Border" Color="#666666"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Background" Color="Black"/>
    <SolidColorBrush x:Key="SliderThumb.Track.Border" Color="Black"/>
    <ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,0 C0,0 11,0 11,0 11,0 11,18 11,18 11,18 0,18 0,18 0,18 0,0 0,0 z" Fill="{StaticResource SliderThumb.Static.Background}" Stroke="{StaticResource SliderThumb.Static.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="2" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,6 C0,6 5.5,0 5.5,0 5.5,0 11,6 11,6 11,6 11,18 11,18 11,18 0,18 0,18 0,18 0,6 0,6 z" Fill="{StaticResource SliderThumb.Static.Background}" Stroke="{StaticResource SliderThumb.Static.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="2" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
        <Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
            <Path x:Name="grip" Data="M 0,12 C0,12 5.5,18 5.5,18 5.5,18 11,12 11,12 11,12 11,0 11,0 11,0 0,0 0,0 0,0 0,12 0,12 z" Fill="{StaticResource SliderThumb.Static.Background}" Stroke="{StaticResource SliderThumb.Static.Border}" SnapsToDevicePixels="True" Stretch="Fill" StrokeThickness="2" UseLayoutRounding="True" VerticalAlignment="Center"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Pressed.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Fill" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Background}"/>
                <Setter Property="Stroke" TargetName="grip" Value="{StaticResource SliderThumb.Disabled.Border}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Slider}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed"/>
                            <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed"/>
                            <Border x:Name="TrackBackground" Background="{StaticResource SliderThumb.Track.Background}" BorderBrush="{StaticResource SliderThumb.Track.Border}" BorderThickness="1" Height="4.0" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
                                <Canvas Margin="-6,-1">
                                    <Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="4.0" Visibility="Hidden"/>
                                </Canvas>
                            </Border>
                            <Track x:Name="PART_Track" Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb" Focusable="False" Height="18" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbHorizontalDefault}" VerticalAlignment="Center" Width="11"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement" Value="TopLeft">
                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                            <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalTop}"/>
                            <Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="BottomRight">
                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                            <Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontalBottom}"/>
                            <Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2"/>
                        </Trigger>
                        <Trigger Property="TickPlacement" Value="Both">
                            <Setter Property="Visibility" TargetName="TopTick" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="BottomTick" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsSelectionRangeEnabled" Value="true">
                            <Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Foreground" TargetName="Thumb" Value="Blue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






    <!-- Repeat Button - This is used by RangeSlider for the LowerRange, Range, and HigherRange buttons -->
    <Style x:Key="DefaultRangeStyle"
         TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable"
            Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle x:Name="MainBorder"
                       Fill="{TemplateBinding Background}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Since a thumb is pretty small, we put a bigger visual clue
        outside the thumb bounds to give the user a hint where the focus is -->
    <Style x:Key="ThumbFocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="-2"
                     StrokeThickness="1"
                     Stroke="Black"
                     StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************** -->
    <!-- Thumb Template    -->
    <!-- ********************** -->
    <ControlTemplate x:Key="ThumbTemplate"
                   TargetType="{x:Type Thumb}">
        <Grid>
            <Border x:Name="BackgroundFadingBorder"
              Background="Black" />
            <Border x:Name="BackgroundBorder"
              BorderBrush="Black"
              BorderThickness="1"
              CornerRadius="1">
                <Rectangle x:Name="MainBorder"
                   Fill="{Binding Background, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource SliderThumb.Static.Background}}"
                   StrokeThickness="1"
                   Stroke="Black"
                   Width="8"
                   Height="16"
                   Opacity="1"
                   SnapsToDevicePixels="True" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
               Value="True">
                <Setter Property="Opacity"
                TargetName="MainBorder"
                Value="0.9" />
            </Trigger>
            <Trigger Property="IsMouseCaptureWithin"
               Value="True">
                <Setter Property="Opacity"
                TargetName="MainBorder"
                Value="0.8" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Slider}}, Path=Orientation}"
                   Value="Vertical">
                <Setter TargetName="MainBorder"
                Property="Width"
                Value="20" />
                <Setter TargetName="MainBorder"
                Property="Height"
                Value="9" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}"
                     Value="{x:Null}" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                     Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity"
                TargetName="MainBorder"
                Value="1" />
                <Setter Property="BorderBrush"
                TargetName="BackgroundBorder"
                Value="Black" />
                <Setter Property="Fill"
                TargetName="MainBorder"
                Value="{StaticResource SliderThumb.MouseOver.Background}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}"
                     Value="{x:Null}" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseCaptureWithin}"
                     Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="BorderBrush"
                TargetName="BackgroundBorder"
                Value="Black" />
                <Setter Property="Fill"
                TargetName="MainBorder"
                Value="{StaticResource SliderThumb.Pressed.Background}" />
            </MultiDataTrigger>

            <Trigger Property="IsEnabled"
               Value="False">
                <Setter Property="BorderBrush"
                TargetName="BackgroundBorder"
                Value="Black" />
                <Setter Property="Fill"
                TargetName="MainBorder"
                Value="Black" />
                <Setter Property="Stroke"
                TargetName="MainBorder"
                Value="Black" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    

    <!-- ********************** -->
    <!-- Slider Template     -->
    <!-- ********************** -->
    <ControlTemplate x:Key="SliderTemplate"
                   TargetType="{x:Type Slider}">
        <!--<Border SnapsToDevicePixels="true"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">-->
        <Track x:Name="PART_Track"
           Orientation="{TemplateBinding Orientation}">
            <Track.Thumb>
                <Thumb x:Name="thumb"
               Focusable="True"
               FocusVisualStyle="{StaticResource ThumbFocusVisualStyle}"
               Background="{TemplateBinding Background}"
               Template="{StaticResource ThumbTemplate}">
                </Thumb>
            </Track.Thumb>
        </Track>
        <!--</Border>-->
    </ControlTemplate>

    <!-- ********************** -->
    <!-- HorizontalTickSlider Template     -->
    <!-- ********************** -->
    <ControlTemplate x:Key="HorizontalTickSliderTemplate"
                   TargetType="{x:Type Slider}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <TickBar Name="TopTick"
               Grid.Row="0"
               SnapsToDevicePixels="True"
               Placement="Top"
               Fill="Black"
               Height="4"
               Visibility="Collapsed" />

            <Border Grid.Row="1"
              SnapsToDevicePixels="true"
              Visibility="Hidden">
                <Track x:Name="PART_Track"
               Orientation="{TemplateBinding Orientation}">
                    <Track.Thumb>
                        <Thumb x:Name="Thumb"
                   Focusable="True"
                   Template="{StaticResource ThumbTemplate}">
                        </Thumb>
                    </Track.Thumb>
                </Track>
            </Border>

            <TickBar Name="BottomTick"
               Grid.Row="2"
               SnapsToDevicePixels="True"
               Fill="Black"
               Placement="Bottom"
               Height="4"
               Visibility="Collapsed" />
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding TickPlacement, RelativeSource={RelativeSource AncestorType={x:Type xctk:RangeSlider}}}"
                   Value="TopLeft">
                <Setter TargetName="TopTick"
                Property="Visibility"
                Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding TickPlacement, RelativeSource={RelativeSource AncestorType={x:Type xctk:RangeSlider}}}"
                   Value="BottomRight">
                <Setter TargetName="BottomTick"
                Property="Visibility"
                Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding TickPlacement, RelativeSource={RelativeSource AncestorType={x:Type xctk:RangeSlider}}}"
                   Value="Both">
                <Setter TargetName="TopTick"
                Property="Visibility"
                Value="Visible" />
                <Setter TargetName="BottomTick"
                Property="Visibility"
                Value="Visible" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ********************** -->
    <!-- VerticalTickSlider Template     -->
    <!-- ********************** -->
    <ControlTemplate x:Key="VerticalTickSliderTemplate"
                   TargetType="{x:Type Slider}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TickBar Name="LeftTick"
               Grid.Column="0"
               SnapsToDevicePixels="True"
               Placement="Left"
               Fill="Black"
               Width="4"
               Visibility="Collapsed" />

            <Border Grid.Column="1"
              SnapsToDevicePixels="true"
              Visibility="Hidden">
                <Track x:Name="PART_Track"
               Orientation="{TemplateBinding Orientation}">
                    <Track.Thumb>
                        <Thumb x:Name="Thumb"
                   Focusable="True"
                   Template="{StaticResource ThumbTemplate}">
                        </Thumb>
                    </Track.Thumb>
                </Track>
            </Border>

            <TickBar Name="RightTick"
               Grid.Column="2"
               SnapsToDevicePixels="True"
               Fill="Black"
               Placement="Right"
               Width="4"
               Visibility="Collapsed" />
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding TickPlacement, RelativeSource={RelativeSource AncestorType={x:Type xctk:RangeSlider}}}"
                   Value="TopLeft">
                <Setter TargetName="LeftTick"
                Property="Visibility"
                Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding TickPlacement, RelativeSource={RelativeSource AncestorType={x:Type xctk:RangeSlider}}}"
                   Value="BottomRight">
                <Setter TargetName="RightTick"
                Property="Visibility"
                Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding TickPlacement, RelativeSource={RelativeSource AncestorType={x:Type xctk:RangeSlider}}}"
                   Value="Both">
                <Setter TargetName="LeftTick"
                Property="Visibility"
                Value="Visible" />
                <Setter TargetName="RightTick"
                Property="Visibility"
                Value="Visible" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ********************** -->
    <!-- Vertical RangeSlider Template -->
    <!-- ********************** -->
    <ControlTemplate x:Key="VerticalRangeSlider"
                   TargetType="{x:Type xctk:RangeSlider}">
        <Border BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Background="{TemplateBinding Background}">
            <Grid HorizontalAlignment="Left"
            VerticalAlignment="Top">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="LeftColumn"
                            Width="0" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition x:Name="RightColumn"
                            Width="0" />
                </Grid.ColumnDefinitions>
                <!-- Get the Thumbs's height to set a good height for the RangeSlider. -->
                <Grid.RowDefinitions>
                    <!-- 11 is equal to the width of the horizontal slider thumb, (or the height of the vertical slider thumb)
               See Thumb template -->
                    <RowDefinition Height="11" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="11" />
                </Grid.RowDefinitions>

                <Border Grid.Row="1"
                Grid.RowSpan="3"
                Grid.Column="1"
                BorderThickness="1"
                BorderBrush="{StaticResource SliderThumb.Track.Background}"
                Background="{StaticResource SliderThumb.Track.Background}"
                VerticalAlignment="Stretch"
                HorizontalAlignment="Center"
                Width="4" />

                <!-- Create a Hidden Slider to only display its Ticks -->
                <Slider x:Name="TickSlider"
                Orientation="Vertical"
                Grid.RowSpan="5"
                Grid.ColumnSpan="3"
                Focusable="False"
                Margin="0,5.5,0,5.5"
                Template="{StaticResource VerticalTickSliderTemplate}"
                Minimum="{Binding Minimum, ElementName=PART_LowerSlider}"
                Maximum="{Binding Maximum, ElementName=PART_HigherSlider}"
                TickFrequency="{TemplateBinding TickFrequency}">
                </Slider>

                <RepeatButton x:Name="PART_LowerRange"
                      Height="{TemplateBinding LowerRangeWidth}"
                      Grid.Row="3"
                      Grid.Column="1"
                      Background="{TemplateBinding LowerRangeBackground}"
                      Style="{Binding LowerRangeStyle, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultRangeStyle}}"
                      SnapsToDevicePixels="True" >
                </RepeatButton>

                <RepeatButton Height="{TemplateBinding RangeWidth}"
                      Grid.Row="2"
                      Grid.Column="1"
                      Background="{TemplateBinding RangeBackground}"
                      Style="{Binding RangeStyle, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultRangeStyle}}"
                      SnapsToDevicePixels="True" >
                </RepeatButton>

                <RepeatButton x:Name="PART_HigherRange"
                      Height="{TemplateBinding HigherRangeWidth}"
                      Grid.Row="1"
                      Grid.Column="1"
                      Background="{TemplateBinding HigherRangeBackground}"
                      Style="{Binding HigherRangeStyle, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultRangeStyle}}"
                      SnapsToDevicePixels="True" >
                </RepeatButton>

                <!-- Margin is set in CodeBehind, based on HigherSlider's Thumb Height -->
                <Slider x:Name="PART_LowerSlider"
                Orientation="Vertical"
                Grid.RowSpan="5"
                Grid.Column="1"
                Focusable="False"
                Background="{TemplateBinding LowerThumbBackground}"
                Template="{StaticResource SliderTemplate}"
                IsSnapToTickEnabled="{TemplateBinding IsSnapToTickEnabled}"
                TickFrequency="{TemplateBinding TickFrequency}"
                HorizontalAlignment="Left"
                AutoToolTipPlacement="{TemplateBinding AutoToolTipPlacement}"
                AutoToolTipPrecision="{TemplateBinding AutoToolTipPrecision}" >
                </Slider>

                <!-- Margin is set in CodeBehind, based on LowerSlider's Thumb width -->
                <Slider x:Name="PART_HigherSlider"
                Grid.RowSpan="5"
                Grid.Column="1"
                Orientation="Vertical"
                Focusable="False"
                Background="{TemplateBinding HigherThumbBackground}"
                Template="{StaticResource SliderTemplate}"
                IsSnapToTickEnabled="{TemplateBinding IsSnapToTickEnabled}"
                TickFrequency="{TemplateBinding TickFrequency}"
                HorizontalAlignment="Left"
                AutoToolTipPlacement="{TemplateBinding AutoToolTipPlacement}"
                AutoToolTipPrecision="{TemplateBinding AutoToolTipPrecision}" >
                </Slider>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement"
               Value="TopLeft">
                <Setter TargetName="LeftColumn"
                Property="Width"
                Value="4" />
            </Trigger>
            <Trigger Property="TickPlacement"
               Value="BottomRight">
                <Setter TargetName="RightColumn"
                Property="Width"
                Value="4" />
            </Trigger>
            <Trigger Property="TickPlacement"
               Value="Both">
                <Setter TargetName="LeftColumn"
                Property="Width"
                Value="4" />
                <Setter TargetName="RightColumn"
                Property="Width"
                Value="4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ********************** -->
    <!-- RangeSlider Style -->
    <!-- ********************** -->
    <Style TargetType="{x:Type xctk:RangeSlider}">
        <Setter Property="IsTabStop"
            Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:RangeSlider}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}">
                        <Grid HorizontalAlignment="Left"
                  VerticalAlignment="Top">

                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="TopRow"
                               Height="0" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition x:Name="BottomRow"
                               Height="0" />
                            </Grid.RowDefinitions>
                            <!-- Get the Thumbs's width to set a good width for the RangeSlider. -->
                            <Grid.ColumnDefinitions>
                                <!-- 11 is equal to the width of the horizontal slider thumb, (or the height of the vertical slider thumb)
                     See Thumb template -->
                                <ColumnDefinition Width="11" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="11" />
                            </Grid.ColumnDefinitions>

                            <Border Grid.Column="1"
                      Grid.ColumnSpan="3"
                      Grid.Row="1"
                      BorderThickness="1"
                      BorderBrush="{StaticResource SliderThumb.Track.Background}"
                      Background="Black"
                      VerticalAlignment="Center"
                      Height="4" />

                            <!-- Create a Hidden Slider to only display its Ticks -->
                            <Slider x:Name="TickSlider"
                      Grid.ColumnSpan="5"
                      Grid.RowSpan="3"
                      Focusable="False"
                      Margin="5.5,0,5.5,0"
                      Template="{StaticResource HorizontalTickSliderTemplate}"
                      Minimum="{Binding Minimum, ElementName=PART_LowerSlider}"
                      Maximum="{Binding Maximum, ElementName=PART_HigherSlider}"
                      TickFrequency="{TemplateBinding TickFrequency}">
                            </Slider>

                            <RepeatButton x:Name="PART_LowerRange"
                            Width="{TemplateBinding LowerRangeWidth}"
                            Grid.Column="1"
                            Grid.Row="1"
                            Background="{TemplateBinding LowerRangeBackground}"
                            Style="{Binding LowerRangeStyle, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultRangeStyle}}"
                            SnapsToDevicePixels="True" >
                            </RepeatButton>

                            <RepeatButton Width="{TemplateBinding RangeWidth}"
                            Grid.Column="2"
                            Grid.Row="1"
                            Background="{TemplateBinding RangeBackground}"
                            Style="{Binding RangeStyle, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultRangeStyle}}"
                            SnapsToDevicePixels="True" >
                            </RepeatButton>

                            <RepeatButton x:Name="PART_HigherRange"
                            Width="{TemplateBinding HigherRangeWidth}"
                            Grid.Column="3"
                            Grid.Row="1"
                            Background="{TemplateBinding HigherRangeBackground}"
                            Style="{Binding HigherRangeStyle, RelativeSource={RelativeSource TemplatedParent}, TargetNullValue={StaticResource DefaultRangeStyle}}"
                            SnapsToDevicePixels="True" >
                            </RepeatButton>

                            <!-- Margin is set in CodeBehind, based on HigherSlider's Thumb width -->
                            <Slider x:Name="PART_LowerSlider"
                      Grid.ColumnSpan="5"
                      Grid.Row="1"
                      Focusable="False"
                      Background="{TemplateBinding LowerThumbBackground}"
                      Template="{StaticResource SliderTemplate}"
                      IsSnapToTickEnabled="{TemplateBinding IsSnapToTickEnabled}"
                      TickFrequency="{TemplateBinding TickFrequency}"
                      AutoToolTipPlacement="{TemplateBinding AutoToolTipPlacement}"
                      AutoToolTipPrecision="{TemplateBinding AutoToolTipPrecision}" >
                            </Slider>

                            <!-- Margin is set in CodeBehind, based on LowerSlider's Thumb width -->
                            <Slider x:Name="PART_HigherSlider"
                      Grid.ColumnSpan="5"
                      Grid.Row="1"
                      Focusable="False"
                      Background="{TemplateBinding HigherThumbBackground}"
                      Template="{StaticResource SliderTemplate}"
                      IsSnapToTickEnabled="{TemplateBinding IsSnapToTickEnabled}"
                      TickFrequency="{TemplateBinding TickFrequency}"
                      AutoToolTipPlacement="{TemplateBinding AutoToolTipPlacement}"
                      AutoToolTipPrecision="{TemplateBinding AutoToolTipPrecision}" >
                            </Slider>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TickPlacement"
                     Value="TopLeft">
                            <Setter TargetName="TopRow"
                      Property="Height"
                      Value="4" />
                        </Trigger>
                        <Trigger Property="TickPlacement"
                     Value="BottomRight">
                            <Setter TargetName="BottomRow"
                      Property="Height"
                      Value="4" />
                        </Trigger>
                        <Trigger Property="TickPlacement"
                     Value="Both">
                            <Setter TargetName="TopRow"
                      Property="Height"
                      Value="4" />
                            <Setter TargetName="BottomRow"
                      Property="Height"
                      Value="4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation"
               Value="Vertical">
                <Setter Property="Template"
                Value="{StaticResource VerticalRangeSlider}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="ButtonStyleClose" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image Name="NormalBtn" Source="{StaticResource ButtonCloseNormal}"/>
                        <Image Name="PressedBtn" Source="{StaticResource ButtonClosePressed}" Visibility="Hidden"/>
                        <Image Name="HoverBtn" Source="{StaticResource ButtonCloseHover}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyleNew" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image Name="NormalBtn" Source="{StaticResource ButtonNewNormal}"/>
                        <Image Name="PressedBtn" Source="{StaticResource ButtonNewPressed}" Visibility="Hidden"/>
                        <Image Name="HoverBtn" Source="{StaticResource ButtonNewHover}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyleLoad" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image Name="NormalBtn" Source="{StaticResource ButtonLoadNormal}"/>
                        <Image Name="PressedBtn" Source="{StaticResource ButtonLoadPressed}" Visibility="Hidden"/>
                        <Image Name="HoverBtn" Source="{StaticResource ButtonLoadHover}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyleSave" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image Name="NormalBtn" Source="{StaticResource ButtonSaveNormal}"/>
                        <Image Name="PressedBtn" Source="{StaticResource ButtonSavePressed}" Visibility="Hidden"/>
                        <Image Name="HoverBtn" Source="{StaticResource ButtonSaveHover}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyleExport" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image Name="NormalBtn" Source="{StaticResource ButtonExportNormal}"/>
                        <Image Name="PressedBtn" Source="{StaticResource ButtonExportPressed}" Visibility="Hidden"/>
                        <Image Name="HoverBtn" Source="{StaticResource ButtonExportHover}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyleInfo" TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image Name="NormalBtn" Source="{StaticResource ButtonInfoNormal}"/>
                        <Image Name="PressedBtn" Source="{StaticResource ButtonInfoPressed}" Visibility="Hidden"/>
                        <Image Name="HoverBtn" Source="{StaticResource ButtonInfoHover}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="NormalBtn" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="PressedBtn" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="HoverBtn" Property="Visibility" Value="Hidden"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButtonStyleMinMax" TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Image Name="MaxNormalBtn" Source="{StaticResource ButtonMaximizeNormal}" Visibility="Hidden"/>
                        <Image Name="MaxHoverBtn" Source="{StaticResource ButtonMaximizeHover}" Visibility="Hidden"/>
                        <Image Name="MaxPressedBtn" Source="{StaticResource ButtonMaximizePressed}" Visibility="Hidden"/>
                        <Image Name="MinNormalBtn" Source="{StaticResource ButtonMinimizeNormal}" />
                        <Image Name="MinHoverBtn" Source="{StaticResource ButtonMinimizeHover}" Visibility="Hidden"/>
                        <Image Name="MinPressedBtn" Source="{StaticResource ButtonMinimizePressed}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="Button.IsDefaulted" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>                            
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButtonStyleSaturation1" TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Image Name="MaxNormalBtn" Source="{StaticResource ButtonSatHighNormal}" Visibility="Hidden"/>
                        <Image Name="MaxHoverBtn" Source="{StaticResource ButtonSatHighHover}" Visibility="Hidden"/>
                        <Image Name="MaxPressedBtn" Source="{StaticResource ButtonSatHighPressed}" Visibility="Hidden"/>
                        <Image Name="MinNormalBtn" Source="{StaticResource ButtonSatBothNormal}" />
                        <Image Name="MinHoverBtn" Source="{StaticResource ButtonSatBothHover}" Visibility="Hidden"/>
                        <Image Name="MinPressedBtn" Source="{StaticResource ButtonSatBothPressed}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="Button.IsDefaulted" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ToggleButtonStyleSaturation2" TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Image Name="MaxNormalBtn" Source="{StaticResource ButtonSatLowNormal}" Visibility="Hidden"/>
                        <Image Name="MaxHoverBtn" Source="{StaticResource ButtonSatLowHover}" Visibility="Hidden"/>
                        <Image Name="MaxPressedBtn" Source="{StaticResource ButtonSatLowPressed}" Visibility="Hidden"/>
                        <Image Name="MinNormalBtn" Source="{StaticResource ButtonSatLinearNormal}" />
                        <Image Name="MinHoverBtn" Source="{StaticResource ButtonSatLinearHover}" Visibility="Hidden"/>
                        <Image Name="MinPressedBtn" Source="{StaticResource ButtonSatLinearPressed}" Visibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="Button.IsDefaulted" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Hidden"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="MinNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MinPressedBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxNormalBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxHoverBtn" Property="Visibility" Value="Hidden"/>
                                <Setter TargetName="MaxPressedBtn" Property="Visibility" Value="Visible"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>









    <!-- COMBOBOX -->
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="White" Offset="0.0"/>
        <GradientStop Color="White" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Static.Border" Color="Black"/>
    <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="Black"/>
    <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#666666" Offset="0.0"/>
        <GradientStop Color="#666666" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#333333"/>
    <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#333333"/>
    <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#333333" Offset="0.0"/>
        <GradientStop Color="#333333" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="Black"/>
    <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="Black"/>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="2" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>            
        </Grid>
        <ControlTemplate.Triggers>            
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
            <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </MultiTrigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ComboBoxStyle1" TargetType="{x:Type ComboBox}">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="FontFamily" Value="{DynamicResource PixelUniCode}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="6,3,5,3"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>        
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ComboBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="Gray"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="LightGray"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="LightGray"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Gray"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="Gray"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Black"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="#3DDADADA"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FFDADADA"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Gray"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="Gray"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Black"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>